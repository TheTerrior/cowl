Cowl bytecode will consist of instructions, with each opcode taking up 8 bits, and the length of an instruction will depend on the instruction itself.


#### OPCODES ####

FUTUREPROOFING 00-0f

MEMORY 10-1f
10 - load [index:64]    #load memory location into variable cache
11 - save [index:64]    #save variable cache into memory location
12 - access [loc:2]{index:64}[index:64]   #access data in a complex type
13 - modify [loc:2]{index:64}[index:64]   #access data in a complex type

14 - clone_pointer  [index:64][index:64]    #clone pointer from second operand to first operand
15 - get_pointer    [index:64]  #returns an int64
16 - dereference    [index:64]  #loads into variable cache

1a - add_scope  #creates a new scope, must eventually be followed by a rem_scope 
1b - rem_scope  #pops the latest scope

DEFINE VARIABLES 20-3f (initiate a Variable into the local storage, which can then be saved with instruction 11)
20 - def_bool   [data:1]
21 - def_char   [data:32]   #will use utf8
22 - def_f32    [data:32]
23 - def_f64    [data:64]
24 - def_i8     [data:8]
25 - def_i16    [data:16]
26 - def_i32    [data:32]
27 - def_i64    [data:64]
28 - def_u8     [data:8]
29 - def_u16    [data:16]
2a - def_u32    [data:32]
2b - def_u64    [data:64]

30 - def_array  [size:64]
31 - def_dict   [0]     #creates new dict in local storage
32 - def_list   [0]
33 - def_set    [0]
34 - def_string [0]

38 - def_func   [return_type:5]{p0_type:5}{p1_type:5}...[end_type:5]{...block...}[end_block:8]
39 - def_struct {p0_type:5}{p1_type:5}...[end_type:5]

OPERATIONS 40-5f
40 - add    [loc:2]{index:64}[loc:2]{index:64}
41 - sub    [loc:2]{index:64}[loc:2]{index:64}
42 - mult   [loc:2]{index:64}[loc:2]{index:64}
43 - div    [loc:2]{index:64}[loc:2]{index:64}
44 - mod    [loc:2]{index:64}[loc:2]{index:64}
45 - exp    [loc:2]{index:64}[loc:2]{index:64}
46 - neg    [loc:2]{index:64}
47 - incr   [loc:2]{index:64}
48 - decr   [loc:2]{index:64}

49 - eq     [loc:2]{index:64}[loc:2]{index:64}
4a - gt     [loc:2]{index:64}[loc:2]{index:64}
4b - lt     [loc:2]{index:64}[loc:2]{index:64}
4c - gte    [loc:2]{index:64}[loc:2]{index:64}
4d - lte    [loc:2]{index:64}[loc:2]{index:64}
4e - ne     [loc:2]{index:64}[loc:2]{index:64}
4f - or     [loc:2]{index:64}[loc:2]{index:64}
50 - and    [loc:2]{index:64}[loc:2]{index:64}
51 - not    [loc:2]{index:64}

52 - b_and  [loc:2]{index:64}[loc:2]{index:64}
53 - b_or   [loc:2]{index:64}[loc:2]{index:64}
54 - b_xor  [loc:2]{index:64}[loc:2]{index:64}
55 - b_ls   [loc:2]{index:64}[loc:2]{index:64}
56 - b_rs   [loc:2]{index:64}[loc:2]{index:64}
57 - b_not  [loc:2]{index:64}

58 - is     [loc:2]{index:64}[loc:2]{index:64}

SPECIAL TYPES 60-6f
60 - call_func  [loc:2]{index:64}[loc:2]{index:64}  #function must receive a list
6f - end_block  [0]     #used to end a function and impl





#### VARIABLE TYPES ####

00 - def_bool  
01 - def_char  
02 - def_f32   
03 - def_f64   
04 - def_i8    
05 - def_i16   
06 - def_i32   
07 - def_i64   
08 - def_u8    
09 - def_u16   
0a - def_u32   
0b - def_u64   

0c - def_array
0d - def_dict  
0e - def_list  
0f - def_set   
10 - def_string

11 - def_func  
12 - def_struct

19 - void   #used for function return type

1f - end    #used for ending a chain of types





#### MEMORY LOCATIONS ####

0 - local cache     #stored as vector, exclusive to the interpreter
1 - parameter array #supplied to a function
2 - heap            #mass storage
